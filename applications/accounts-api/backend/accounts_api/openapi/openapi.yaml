openapi: 3.0.2
info:
  contact:
    email: cloudharness@metacell.us
  description: Accounts rest api
  license:
    name: UNLICENSED
  title: accounts_api
  version: 0.1.0
servers:
- url: /api
tags:
- description: ""
  name: infrastructure
- description: ""
  name: users
paths:
  /groups/{groupname}/:
    get:
      operationId: get_group
      parameters:
      - explode: false
        in: path
        name: groupname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Get a user's public information
      tags:
      - groups
      x-openapi-router-controller: accounts_api.controllers.groups_controller
    put:
      operationId: update_group
      parameters:
      - explode: false
        in: path
        name: groupname
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user as just saved
      security:
      - bearerAuth: []
      tags:
      - groups
      x-openapi-router-controller: accounts_api.controllers.groups_controller
  /groups/{groupname}/users:
    get:
      operationId: get_group_users
      parameters:
      - explode: false
        in: path
        name: groupname
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: Get a user's public information
      tags:
      - groups
      x-openapi-router-controller: accounts_api.controllers.groups_controller
  /live:
    get:
      operationId: live
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Healthy
        "500":
          description: Application is not healthy
      summary: Test if application is healthy
      tags:
      - infrastructure
      x-openapi-router-controller: accounts_api.controllers.infrastructure_controller
  /ready:
    get:
      operationId: ready
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Ready
        "500":
          description: Application is not ready yet
      summary: Test if application is ready to take requests
      tags:
      - infrastructure
      x-openapi-router-controller: accounts_api.controllers.infrastructure_controller
  /users:
    post:
      operationId: create_user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user as just saved
      security:
      - bearerAuth: []
      tags:
      - users
      x-openapi-router-controller: accounts_api.controllers.users_controller
  /users/{userid}:
    get:
      operationId: get_user
      parameters:
      - description: user id
        explode: false
        in: path
        name: userid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Get a user's public information
      tags:
      - users
      x-openapi-router-controller: accounts_api.controllers.users_controller
    put:
      operationId: update_user
      parameters:
      - description: user id
        explode: false
        in: path
        name: userid
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: The user as just saved
      security:
      - bearerAuth: []
      tags:
      - users
      x-openapi-router-controller: accounts_api.controllers.users_controller
components:
  schemas:
    Valid:
      properties:
        response:
          type: string
      type: object
    Url:
      description: ""
      type: string
    Profiles:
      additionalProperties: true
      description: ""
      title: quotas
      type: object
    User:
      additionalProperties: true
      description: Keycloak User
      example:
        firstName: firstName
        lastName: lastName
        website: website
        quotas:
          key: ""
        profiles:
          key: ""
        registrationDate: 2000-01-23
        groups:
        - groups
        - groups
        id: id
        avatar: avatar
        email: email
        username: username
      properties:
        id:
          description: user id
          type: string
        username:
          description: Username of the keycloak user
          type: string
        email:
          description: Email address of the keycloak user
          type: string
        firstName:
          description: First Name of the keycloak user
          type: string
        lastName:
          description: Last Name of the keycloak user
          type: string
        groups:
          description: ""
          items:
            type: string
          readOnly: true
          type: array
        profiles:
          additionalProperties: true
          description: ""
          title: quotas
          type: object
        registrationDate:
          description: ""
          format: date
          type: string
        avatar:
          description: ""
          type: string
        website:
          description: ""
          type: string
        quotas:
          additionalProperties: true
          description: ""
          title: quotas
          type: object
      title: User
      type: object
    Group:
      description: ""
      example:
        quotas:
          key: ""
        keywords:
        - keywords
        - keywords
        name: name
        description: ""
        links:
          key: ""
      properties:
        quotas:
          additionalProperties: true
          description: ""
          title: quotas
          type: object
        name:
          description: ""
          title: name
          type: string
        description:
          description: ""
          title: description
        links:
          additionalProperties: true
          description: ""
          title: quotas
          type: object
        keywords:
          description: ""
          items:
            type: string
          title: keywords
          type: array
      required:
      - name
      title: Group
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
      x-bearerInfoFunc: cloudharness.auth.decode_token
