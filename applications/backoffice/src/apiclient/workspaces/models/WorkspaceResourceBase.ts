/* tslint:disable */
/* eslint-disable */
/**
 * Workspaces manager API
 * Opensource Brain Platform - Reference Workspaces manager API
 *
 * The version of the OpenAPI document: 0.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResourceStatus,
    ResourceStatusFromJSON,
    ResourceStatusFromJSONTyped,
    ResourceStatusToJSON,
    ResourceType,
    ResourceTypeFromJSON,
    ResourceTypeFromJSONTyped,
    ResourceTypeToJSON,
} from '.';

/**
 * 
 * @export
 * @interface WorkspaceResourceBase
 */
export interface WorkspaceResourceBase {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceResourceBase
     */
    id?: number;
    /**
     * WorkspaceResource name
     * @type {string}
     * @memberof WorkspaceResourceBase
     */
    name: string;
    /**
     * WorkspaceResource folder where the resource will stored in the pvc
     * @type {string}
     * @memberof WorkspaceResourceBase
     */
    folder?: string;
    /**
     * 
     * @type {ResourceStatus}
     * @memberof WorkspaceResourceBase
     */
    status?: ResourceStatus;
    /**
     * Date/time of creation of the WorkspaceResource
     * @type {Date}
     * @memberof WorkspaceResourceBase
     */
    timestampCreated?: Date;
    /**
     * Date/time of last updating of the WorkspaceResource
     * @type {Date}
     * @memberof WorkspaceResourceBase
     */
    timestampUpdated?: Date;
    /**
     * Date/time of last opening of the WorkspaceResource
     * @type {Date}
     * @memberof WorkspaceResourceBase
     */
    timestampLastOpened?: Date;
    /**
     * 
     * @type {ResourceType}
     * @memberof WorkspaceResourceBase
     */
    resourceType: ResourceType;
}

export function WorkspaceResourceBaseFromJSON(json: any): WorkspaceResourceBase {
    return WorkspaceResourceBaseFromJSONTyped(json, false);
}

export function WorkspaceResourceBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkspaceResourceBase {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'folder': !exists(json, 'folder') ? undefined : json['folder'],
        'status': !exists(json, 'status') ? undefined : ResourceStatusFromJSON(json['status']),
        'timestampCreated': !exists(json, 'timestamp_created') ? undefined : (new Date(json['timestamp_created'])),
        'timestampUpdated': !exists(json, 'timestamp_updated') ? undefined : (new Date(json['timestamp_updated'])),
        'timestampLastOpened': !exists(json, 'timestamp_last_opened') ? undefined : (new Date(json['timestamp_last_opened'])),
        'resourceType': ResourceTypeFromJSON(json['resource_type']),
    };
}

export function WorkspaceResourceBaseToJSON(value?: WorkspaceResourceBase | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'folder': value.folder,
        'status': ResourceStatusToJSON(value.status),
        'timestamp_created': value.timestampCreated === undefined ? undefined : (value.timestampCreated.toISOString()),
        'timestamp_updated': value.timestampUpdated === undefined ? undefined : (value.timestampUpdated.toISOString()),
        'timestamp_last_opened': value.timestampLastOpened === undefined ? undefined : (value.timestampLastOpened.toISOString()),
        'resource_type': ResourceTypeToJSON(value.resourceType),
    };
}


