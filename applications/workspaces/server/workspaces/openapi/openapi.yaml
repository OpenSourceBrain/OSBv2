openapi: 3.0.0
info:
  description: Opensource Brain Platform - Reference Workspaces manager API
  license:
    name: UNLICENSED
  title: Workspaces manager API
  version: 0.1.0
servers:
- description: SwaggerHub API Auto Mocking
  url: /api
tags:
- description: rest API for Workspaces manager
  name: rest
- description: Producer
  name: Producer
- description: Consumer
  name: Consumer
- description: Client
  name: Client
paths:
  /workspace:
    get:
      tags:
        - rest
      summary: Used to list all available workspaces.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=Work%ce 18+id__=1
          required: false
          description: The search string for filtering of the items to return. Multiple criteria are seperated by '+'. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available workspaces
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  workspaces:
                    type: array
                    items:
                      $ref: "#/components/schemas/Workspace"
    post:
      tags:
        - rest                  
      summary: Used to save a Workspace to the repository. The owner will be automatically filled with the current user
      security:
        - bearerAuth: []
      requestBody:
        description: The Workspace to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        400:
          description: The Workspace already exists.
  /workspace/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve a workspace from the repository.
      responses:
        200:
          description: The workspace.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        404:
          description: The workspace was not found.
      tags:
        - rest
    put:
      summary: Update an workspace in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The workspace to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Workspace"
      responses:
        200:
          description: The workspace was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Workspace"
        404:
          description: The workspace was not found.
      tags:
        - rest
    delete:
      summary: Delete an workspace from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The workspace was deleted.
        404:
          description: The workspace was not found.
      tags:
        - rest
  /workspace/{id}/type:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
    post:
      summary: Add a Workspace type to the workspace.
      operationId: workspaces.controller.workspace.addtype
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                workspaceType:
                  $ref: "#/components/schemas/WorkspaceType"
                  required: true
      responses:
        200:
          description: The Workspace type was added to the workspace.
        404:
          description: The workspace was not found or workspace type not specified         
      tags:
        - rest
  /workspace/{id}/type/{type_id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
      - in: path
        name: type_id
        required: true
        schema:
          type: integer
        description: Workspace Type Id to be deleted from the workspace
    delete:
      summary: Delete a Workspace Type from the workspace.
      operationId: workspaces.controller.workspace.deltype
      security:
        - bearerAuth: []
      responses:
        200:
          description: The Workspace Type is successfully deleted from the workspace.
        404:
          description: The workspace was not found.
      tags:
        - rest
  /workspace/{id}/thumbnail:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
    put:
      summary: Sets the thumbnail of the workspace.
      operationId: workspaces.controller.workspace.setthumbnail
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                thumbNail:
                  type: string
                  format: binary
      responses:
        200:
          description: The workspace was updated with the thumbnail.
        404:
          description: The workspace was not found or the thumbnail was not specified         
      tags:
        - rest
  /workspace/{id}/gallery:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
    post:
      summary: Adds and image to the workspace.
      operationId: workspaces.controller.workspace.addimage
      security:
        - bearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        200:
          description: The image was added to the workspace.
        404:
          description: The workspace was not found or the image was not specified         
      tags:
        - rest
  /workspace/{id}/gallery/{image_id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Workspace ID of the workspace
      - in: path
        name: image_id
        required: true
        schema:
          type: integer
        description: Workspace Image Id to be deleted from the workspace
    delete:
      summary: Delete a Workspace Image from the workspace.
      operationId: workspaces.controller.workspace.delimage
      security:
        - bearerAuth: []
      responses:
        200:
          description: The Workspace Image is successfully deleted from the workspace.
        404:
          description: The workspace was not found.
      tags:
        - rest

  /osbrepository:
    get:
      tags:
        - rest
      summary: Used to list all available osbrepositories.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=%reposi%
          required: false
          description: The search string for filtering of the items to return. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available osbrepositories
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  osbrepositories:
                    type: array
                    items:
                      $ref: "#/components/schemas/OSBRepository"
    post:
      tags:
        - rest                  
      summary: Used to save a OSBRepository to the repository. The owner will be automatically filled with the current user
      security:
        - bearerAuth: []
      requestBody:
        description: The OSBRepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OSBRepository"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSBRepository"
        400:
          description: The OSBRepository already exists.
  /osbrepository/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve an osbrepository from the repository.
      responses:
        200:
          description: The osbrepository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSBRepository"
        404:
          description: The osbrepository was not found.
      tags:
        - rest
    put:
      summary: Update an osbrepository in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The osbrepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OSBRepository"
      responses:
        200:
          description: The osbrepository was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OSBRepository"
        404:
          description: The osbrepository was not found.
      tags:
        - rest
    delete:
      summary: Delete an osbrepository from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The osbrepository was deleted.
        404:
          description: The osbrepository was not found.
      tags:
        - rest 
                  
  /gitrepository:
    get:
      tags:
        - rest
      summary: Used to list all available gitrepositories.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=%reposi%
          required: false
          description: The search string for filtering of the items to return. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available gitrepositories
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  gitrepositories:
                    type: array
                    items:
                      $ref: "#/components/schemas/GITRepository"
    post:
      tags:
        - rest                  
      summary: Used to save a GITRepository to the repository. The owner will be automatically filled with the current user
      security:
        - bearerAuth: []
      requestBody:
        description: The GITRepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GITRepository"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GITRepository"
        400:
          description: The GITRepository already exists.
  /gitrepository/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve an gitrepository from the repository.
      responses:
        200:
          description: The gitrepository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GITRepository"
        404:
          description: The gitrepository was not found.
      tags:
        - rest
    put:
      summary: Update an gitrepository in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The gitrepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GITRepository"
      responses:
        200:
          description: The gitrepository was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GITRepository"
        404:
          description: The gitrepository was not found.
      tags:
        - rest
    delete:
      summary: Delete an gitrepository from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The gitrepository was deleted.
        404:
          description: The gitrepository was not found.
      tags:
        - rest 
                   
  /figsharerepository:
    get:
      tags:
        - rest
      summary: Used to list all available figsharerepositories.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=%reposi%
          required: false
          description: The search string for filtering of the items to return. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available figsharerepositories
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  figsharerepositories:
                    type: array
                    items:
                      $ref: "#/components/schemas/FigshareRepository"
    post:
      tags:
        - rest                  
      summary: Used to save a FigshareRepository to the repository. The owner will be automatically filled with the current user
      security:
        - bearerAuth: []
      requestBody:
        description: The FigshareRepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FigshareRepository"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FigshareRepository"
        400:
          description: The FigshareRepository already exists.
  /figsharerepository/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve an figsharerepository from the repository.
      responses:
        200:
          description: The figsharerepository.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FigshareRepository"
        404:
          description: The figsharerepository was not found.
      tags:
        - rest
    put:
      summary: Update an figsharerepository in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The figsharerepository to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FigshareRepository"
      responses:
        200:
          description: The figsharerepository was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FigshareRepository"
        404:
          description: The figsharerepository was not found.
      tags:
        - rest
    delete:
      summary: Delete an figsharerepository from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The figsharerepository was deleted.
        404:
          description: The figsharerepository was not found.
      tags:
        - rest     

  /volumestorage:
    get:
      tags:
        - rest
      summary: Used to list all available volumestorages.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          description: The page number for starting to collect the result set.
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          required: false
          description: The number of items to return.
        - in: query
          name: q
          schema:
            type: string
            default: None
            example: name__like=%storage%
          required: false
          description: The search string for filtering of the items to return. Format [fieldname][comparator = , __not= , __like= ][value]     
      responses:
        200:
          description: Return all available volumestorages
          content:
            application/json:
              schema:
                type: object
                properties:
                  pagination:
                    $ref: "#/components/schemas/Pagination"
                  volumestorages:
                    type: array
                    items:
                      $ref: "#/components/schemas/VolumeStorage"
    post:
      tags:
        - rest                  
      summary: Used to save a VolumeStorage to the repository. The owner will be automatically filled with the current user
      security:
        - bearerAuth: []      
      requestBody:
        description: The VolumeStorage to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeStorage"
      responses:
        201:
          description: Save successful.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeStorage"
        400:
          description: The VolumeStorage already exists.
  /volumestorage/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      summary: Used to retrieve an volumestorage from the repository.
      responses:
        200:
          description: The volumestorage.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeStorage"
        404:
          description: The volumestorage was not found.
      tags:
        - rest
    put:
      summary: Update an volumestorage in the repository.
      security:
        - bearerAuth: []
      requestBody:
        description: The volumestorage to save.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VolumeStorage"
      responses:
        200:
          description: The volumestorage was updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolumeStorage"
        404:
          description: The volumestorage was not found.
      tags:
        - rest
    delete:
      summary: Delete an volumestorage from the repository.
      security:
        - bearerAuth: []
      responses:
        200:
          description: The volumestorage was deleted.
        404:
          description: The volumestorage was not found.
      tags:
        - rest            

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: workspaces.utils._decode_token
  schemas:
    Valid:
      type: object
      properties:
        response:
          type: string    
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
        number_of_pages:
          type: integer
    PrimaryKey:
      type: integer
      x-primary-key: true
      x-autoincrement: true
    ResourceType:
      description: >
        Resource type:
         * e - Experimental
         * m - Model
         * g - Generic
      type: string
      enum:
        - e
        - m
        - g
      default: g
      example: g
    WorkspaceType:
      description: >
        Workspace type: type of a Workspace, a workspace can have multiple unique types assigned 
         * netpyne - Single cell/Network NetPyNE
         * nwbexplorer - Data analyses NWB Explorer
         * jupyterlab - Jupyter Lab playground
      type: string
      enum:
        - netpyne
        - nwbexplorer
        - jupyterlab
      default: netpyne
      example: netpyne
    ImageType:
      type: string
    User:
      description: key cloak User
      type: object
      x-tablename: keycloakuser
      properties:
        id:
          description: Unique identifier of the Workspace
          $ref: "#/components/schemas/PrimaryKey"
        keycloak_id:
          description: Keycloak user id
          type: string
          example: 114b8f24-cb4c-4105-97a2-9e2ecb221d94
          x-index: true
        firstname:
          description: First name of the user (derived from Keycload)
          type: string
          example: John
        lastname:
          description: Last name of the user (derived from Keycload)
          type: string
          example: Doe
        email:
          description: Email address of the user (derived from Keycloak)
          type: string
          example: john.doe@example.com
    Workspace:
      description: Workspace item
      type: object
      x-tablename: workspace
      properties:
        id:
          description: Unique identifier of the Workspace
          $ref: "#/components/schemas/PrimaryKey"
        name:
          description: Workspace name.
          type: string
          example: Workspace One
        description:
          description: Workspace description.
          type: string
          example: Workspace One description
        timestamp_created:
          description: Date/time the Workspace is created
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z
        timestamp_updated:
          description: Date/time the Workspace is last updated
          type: string
          format: 'date-time'
          example: 2019-11-23T01:23:45Z
        tags:
          description: Workspace tags
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/WorkspaceTag"
        last_type:
          description: The last type the workspace is opened with
          $ref: "#/components/schemas/WorkspaceType"
        types:
          description: Workspace types of the workspace
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/WorkspaceHasType"      
        thumbnail:
          description: Workspace type icon.
          $ref: "#/components/schemas/ImageType"
        gallery:
          description: Gallery with images of the workspace
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/WorkspaceImage"
        owner:
          description: Workspace owner, will be automatically be set to the logged in user
          $ref: "#/components/schemas/User"
        publicable:
          description: Is the workspace available for non collaborators? Default false
          type: boolean
          default: false
          example: false
        license:
          description: Workspace license
          type: string
          example: license
        collaborators:
          description: Collaborators who work on the workspace
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/User"
              - x-secondary: workspace_collaborator
        resources:
          description: Resources of the workspace
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/WorkspaceResource"
        storage:
          description: Storage of the workspace
          $ref: "#/components/schemas/VolumeStorage"
      required:
        - name
        - description
    WorkspaceHasType:
      description: Workspace types of a workspace, a workspace can have multiple types
      type: object
      x-tablename: workspacehastype
      properties:
        id:
          description: Unique identifier of the WorkspaceHasType
          $ref: "#/components/schemas/PrimaryKey"
        type:
          description: Workspace type
          $ref: "#/components/schemas/WorkspaceType"
      required:
        - type        
    WorkspaceImage:
      description: Workspace images of a workspace
      type: object
      x-tablename: workspaceimage
      properties:
        id:
          description: Unique identifier of the WorkspaceImage
          $ref: "#/components/schemas/PrimaryKey"
        image:
          description: Workspace Image
          $ref: "#/components/schemas/ImageType"
      required:
        - image    
    WorkspaceTag:
      description: Workspace tags linking to workspaces
      type: object
      x-tablename: WorkspaceTag
      properties:
        id:
          description: Unique identifier of the WorkspaceTag
          $ref: "#/components/schemas/PrimaryKey"
        tag:
          description: WorkspaceTag tag
          type: string
          example: Workspace Tag One
      required:
        - tag
    WorkspaceResource:
      description: Workspace Resource item of a Workspace
      type: object
      x-tablename: workspaceresource
      properties:
        id:
          description: Unique identifier of the WorkspaceResource
          $ref: "#/components/schemas/PrimaryKey"
        name:
          description: WorkspaceResource name
          type: string
          example: Workspace Resource One
        resource_type:
          description: WorkspaceResource type
          $ref: "#/components/schemas/ResourceType"
      required:
        - name
        - resource_type
    VolumeStorage:
      description: Volume which can be connected to a workspace
      type: object
      x-tablename: volumestorage
      properties:
        id:
          description: Unique identifier of the StorageVolume
          $ref: "#/components/schemas/PrimaryKey"
        name:
          description: StorageVolume name
          type: string
          example: Storage Volume One
      required:
        - name
    OSBRepository:
      description: Opensource brain repository
      type: object
      x-tablename: osbrepository
      properties:
        id:
          description: Unique identifier of the OSB repository
          $ref: "#/components/schemas/PrimaryKey"
        uuid:
          description: Universally unique identifier of the OSB repository
          type: string
          example: 123e4567-e89b-12d3-a456-426655440000 
        name:
          description: OSB repository name
          type: string
          example: OSB repository One
        storage:
          description: Storage of the OSB repository
          $ref: "#/components/schemas/VolumeStorage"
        resources:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/WorkspaceResource"
              - x-secondary: osbrepository_resources
      required:
        - uuid
        - name
        - storage
    GITRepository:
      description: GIT repository
      type: object
      x-tablename: gitrepository
      properties:
        id:
          description: Unique identifier of the git repository
          $ref: "#/components/schemas/PrimaryKey"        
        public_key:
          description: Public key of the git repository
          type: string
          example: >
            ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU
            GPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3
            Pbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA
            t3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En
            mZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx
            NrRFi9wrf+M7Q== johndoe@mylaptop.local
        private_key:
          description: Public key of the git repository
          type: string
          example: >
            -----BEGIN OPENSSH PRIVATE KEY-----
            b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAACFwAAAAdzc2gtcn
            V2VJ4iZzZN0pyzBU5JobynN8U54sjxvGakAsNfoGzzSFyVkLaRHLYluuDNsZ4PVj5V/boF
            Fa34xPq1dsfsSuFmiy004cYlhBMBkIpKLZrQe7zY9+CdgzfTEFaeBM9Gxy2Sw/WxlCdh5T
            W87/Q4YI3k0AAAASenNpbm5lbWFAZ21haWwuY29tAQ==
            -----END OPENSSH PRIVATE KEY-----
        url:
          description: URL of the git repository
          type: string
          example: https://github.com/OpenSourceBrain/OSBv2
      required:
        - public_key
        - private_key
        - url
    FigshareRepository:
      description: Figshare repository
      type: object
      x-tablename: figsharerepository
      properties:
        id:
          description: Unique identifier of the figshare repository
          $ref: "#/components/schemas/PrimaryKey"
        url:
          description: URL of the figshare repository
          type: string
          example: https://figshare.com/articles/Screenshot_of_OSB/6034208
      required:
        - url