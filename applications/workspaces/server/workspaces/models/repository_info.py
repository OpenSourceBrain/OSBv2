# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces import util


class RepositoryInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts=None, name=None, summary=None, tags=None):  # noqa: E501
        """RepositoryInfo - a model defined in OpenAPI

        :param contexts: The contexts of this RepositoryInfo.  # noqa: E501
        :type contexts: List[str]
        :param name: The name of this RepositoryInfo.  # noqa: E501
        :type name: str
        :param summary: The summary of this RepositoryInfo.  # noqa: E501
        :type summary: str
        :param tags: The tags of this RepositoryInfo.  # noqa: E501
        :type tags: List[str]
        """
        self.openapi_types = {
            'contexts': List[str],
            'name': str,
            'summary': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'name': 'name',
            'summary': 'summary',
            'tags': 'tags'
        }

        self._contexts = contexts
        self._name = name
        self._summary = summary
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'RepositoryInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RepositoryInfo of this RepositoryInfo.  # noqa: E501
        :rtype: RepositoryInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self):
        """Gets the contexts of this RepositoryInfo.


        :return: The contexts of this RepositoryInfo.
        :rtype: List[str]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts):
        """Sets the contexts of this RepositoryInfo.


        :param contexts: The contexts of this RepositoryInfo.
        :type contexts: List[str]
        """

        self._contexts = contexts

    @property
    def name(self):
        """Gets the name of this RepositoryInfo.


        :return: The name of this RepositoryInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryInfo.


        :param name: The name of this RepositoryInfo.
        :type name: str
        """

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this RepositoryInfo.


        :return: The summary of this RepositoryInfo.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this RepositoryInfo.


        :param summary: The summary of this RepositoryInfo.
        :type summary: str
        """

        self._summary = summary

    @property
    def tags(self):
        """Gets the tags of this RepositoryInfo.


        :return: The tags of this RepositoryInfo.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RepositoryInfo.


        :param tags: The tags of this RepositoryInfo.
        :type tags: List[str]
        """

        self._tags = tags
