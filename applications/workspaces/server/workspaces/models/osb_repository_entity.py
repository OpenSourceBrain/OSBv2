# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from workspaces.models.base_model_ import Model
from workspaces.models.osb_repository_base import OSBRepositoryBase
from workspaces.models.repository_type import RepositoryType
from workspaces.models.tag import Tag
from workspaces import util

from workspaces.models.osb_repository_base import OSBRepositoryBase  # noqa: E501
from workspaces.models.repository_type import RepositoryType  # noqa: E501
from workspaces.models.tag import Tag  # noqa: E501

class OSBRepositoryEntity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, summary=None, repository_type=None, content_types=None, auto_sync=True, uri=None, default_context=None, thumbnail=None, user_id=None, timestamp_created=None, timestamp_updated=None, tags=None):  # noqa: E501
        """OSBRepositoryEntity - a model defined in OpenAPI

        :param id: The id of this OSBRepositoryEntity.  # noqa: E501
        :type id: int
        :param name: The name of this OSBRepositoryEntity.  # noqa: E501
        :type name: str
        :param summary: The summary of this OSBRepositoryEntity.  # noqa: E501
        :type summary: str
        :param repository_type: The repository_type of this OSBRepositoryEntity.  # noqa: E501
        :type repository_type: RepositoryType
        :param content_types: The content_types of this OSBRepositoryEntity.  # noqa: E501
        :type content_types: str
        :param auto_sync: The auto_sync of this OSBRepositoryEntity.  # noqa: E501
        :type auto_sync: bool
        :param uri: The uri of this OSBRepositoryEntity.  # noqa: E501
        :type uri: str
        :param default_context: The default_context of this OSBRepositoryEntity.  # noqa: E501
        :type default_context: str
        :param thumbnail: The thumbnail of this OSBRepositoryEntity.  # noqa: E501
        :type thumbnail: str
        :param user_id: The user_id of this OSBRepositoryEntity.  # noqa: E501
        :type user_id: str
        :param timestamp_created: The timestamp_created of this OSBRepositoryEntity.  # noqa: E501
        :type timestamp_created: datetime
        :param timestamp_updated: The timestamp_updated of this OSBRepositoryEntity.  # noqa: E501
        :type timestamp_updated: datetime
        :param tags: The tags of this OSBRepositoryEntity.  # noqa: E501
        :type tags: List[Tag]
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'summary': str,
            'repository_type': RepositoryType,
            'content_types': str,
            'auto_sync': bool,
            'uri': str,
            'default_context': str,
            'thumbnail': str,
            'user_id': str,
            'timestamp_created': datetime,
            'timestamp_updated': datetime,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'summary': 'summary',
            'repository_type': 'repository_type',
            'content_types': 'content_types',
            'auto_sync': 'auto_sync',
            'uri': 'uri',
            'default_context': 'default_context',
            'thumbnail': 'thumbnail',
            'user_id': 'user_id',
            'timestamp_created': 'timestamp_created',
            'timestamp_updated': 'timestamp_updated',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._summary = summary
        self._repository_type = repository_type
        self._content_types = content_types
        self._auto_sync = auto_sync
        self._uri = uri
        self._default_context = default_context
        self._thumbnail = thumbnail
        self._user_id = user_id
        self._timestamp_created = timestamp_created
        self._timestamp_updated = timestamp_updated
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'OSBRepositoryEntity':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OSBRepositoryEntity of this OSBRepositoryEntity.  # noqa: E501
        :rtype: OSBRepositoryEntity
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OSBRepositoryEntity.


        :return: The id of this OSBRepositoryEntity.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSBRepositoryEntity.


        :param id: The id of this OSBRepositoryEntity.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OSBRepositoryEntity.

        Repository name.  # noqa: E501

        :return: The name of this OSBRepositoryEntity.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OSBRepositoryEntity.

        Repository name.  # noqa: E501

        :param name: The name of this OSBRepositoryEntity.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this OSBRepositoryEntity.

        Summary describing the OSB Repository  # noqa: E501

        :return: The summary of this OSBRepositoryEntity.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this OSBRepositoryEntity.

        Summary describing the OSB Repository  # noqa: E501

        :param summary: The summary of this OSBRepositoryEntity.
        :type summary: str
        """

        self._summary = summary

    @property
    def repository_type(self):
        """Gets the repository_type of this OSBRepositoryEntity.


        :return: The repository_type of this OSBRepositoryEntity.
        :rtype: RepositoryType
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this OSBRepositoryEntity.


        :param repository_type: The repository_type of this OSBRepositoryEntity.
        :type repository_type: RepositoryType
        """
        if repository_type is None:
            raise ValueError("Invalid value for `repository_type`, must not be `None`")  # noqa: E501

        self._repository_type = repository_type

    @property
    def content_types(self):
        """Gets the content_types of this OSBRepositoryEntity.

        List of Repository Content Types  # noqa: E501

        :return: The content_types of this OSBRepositoryEntity.
        :rtype: str
        """
        return self._content_types

    @content_types.setter
    def content_types(self, content_types):
        """Sets the content_types of this OSBRepositoryEntity.

        List of Repository Content Types  # noqa: E501

        :param content_types: The content_types of this OSBRepositoryEntity.
        :type content_types: str
        """
        if content_types is None:
            raise ValueError("Invalid value for `content_types`, must not be `None`")  # noqa: E501

        self._content_types = content_types

    @property
    def auto_sync(self):
        """Gets the auto_sync of this OSBRepositoryEntity.

        Auto sync of the resources  # noqa: E501

        :return: The auto_sync of this OSBRepositoryEntity.
        :rtype: bool
        """
        return self._auto_sync

    @auto_sync.setter
    def auto_sync(self, auto_sync):
        """Sets the auto_sync of this OSBRepositoryEntity.

        Auto sync of the resources  # noqa: E501

        :param auto_sync: The auto_sync of this OSBRepositoryEntity.
        :type auto_sync: bool
        """

        self._auto_sync = auto_sync

    @property
    def uri(self):
        """Gets the uri of this OSBRepositoryEntity.

        URI of the repository  # noqa: E501

        :return: The uri of this OSBRepositoryEntity.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this OSBRepositoryEntity.

        URI of the repository  # noqa: E501

        :param uri: The uri of this OSBRepositoryEntity.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def default_context(self):
        """Gets the default_context of this OSBRepositoryEntity.

        The default branch to show for this repository  # noqa: E501

        :return: The default_context of this OSBRepositoryEntity.
        :rtype: str
        """
        return self._default_context

    @default_context.setter
    def default_context(self, default_context):
        """Sets the default_context of this OSBRepositoryEntity.

        The default branch to show for this repository  # noqa: E501

        :param default_context: The default_context of this OSBRepositoryEntity.
        :type default_context: str
        """

        self._default_context = default_context

    @property
    def thumbnail(self):
        """Gets the thumbnail of this OSBRepositoryEntity.


        :return: The thumbnail of this OSBRepositoryEntity.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this OSBRepositoryEntity.


        :param thumbnail: The thumbnail of this OSBRepositoryEntity.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def user_id(self):
        """Gets the user_id of this OSBRepositoryEntity.

        OSBRepository keycloak user id, will be automatically be set to the logged in user  # noqa: E501

        :return: The user_id of this OSBRepositoryEntity.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this OSBRepositoryEntity.

        OSBRepository keycloak user id, will be automatically be set to the logged in user  # noqa: E501

        :param user_id: The user_id of this OSBRepositoryEntity.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def timestamp_created(self):
        """Gets the timestamp_created of this OSBRepositoryEntity.

        Date/time the Workspace is created  # noqa: E501

        :return: The timestamp_created of this OSBRepositoryEntity.
        :rtype: datetime
        """
        return self._timestamp_created

    @timestamp_created.setter
    def timestamp_created(self, timestamp_created):
        """Sets the timestamp_created of this OSBRepositoryEntity.

        Date/time the Workspace is created  # noqa: E501

        :param timestamp_created: The timestamp_created of this OSBRepositoryEntity.
        :type timestamp_created: datetime
        """

        self._timestamp_created = timestamp_created

    @property
    def timestamp_updated(self):
        """Gets the timestamp_updated of this OSBRepositoryEntity.

        Date/time the Workspace is last updated  # noqa: E501

        :return: The timestamp_updated of this OSBRepositoryEntity.
        :rtype: datetime
        """
        return self._timestamp_updated

    @timestamp_updated.setter
    def timestamp_updated(self, timestamp_updated):
        """Sets the timestamp_updated of this OSBRepositoryEntity.

        Date/time the Workspace is last updated  # noqa: E501

        :param timestamp_updated: The timestamp_updated of this OSBRepositoryEntity.
        :type timestamp_updated: datetime
        """

        self._timestamp_updated = timestamp_updated

    @property
    def tags(self):
        """Gets the tags of this OSBRepositoryEntity.


        :return: The tags of this OSBRepositoryEntity.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OSBRepositoryEntity.


        :param tags: The tags of this OSBRepositoryEntity.
        :type tags: List[Tag]
        """

        self._tags = tags
