version: '1.0'
stages:
- prepare
- build
- unittest
- deploy
- qa
- publish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
    - title: Cloning cloud-harness repository...
      type: git-clone
      stage: prepare
      repo: https://github.com/MetaCell/cloud-harness.git
      revision: '${{CLOUDHARNESS_BRANCH}}'
      working_directory: .
      git: github
    - title: Cloning nwb-explorer.git repository...
      type: git-clone
      repo: https://github.com/MetaCell/nwb-explorer.git
      revision: development
      working_directory: applications/nwb-explorer/dependencies/nwb-explorer.git
      git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.9.10
    stage: prepare
    working_directory: .
    commands:
    - bash cloud-harness/install.sh
    - harness-deployment cloud-harness . -d ${{DOMAIN}} -r ${{REGISTRY}} -rs ${{REGISTRY_SECRET}}
      -n ${{NAMESPACE}} --write-env -e dev -i osb-portal
    - cat deployment/.env >> ${{CF_VOLUME_PATH}}/env_vars_to_export
    - cat ${{CF_VOLUME_PATH}}/env_vars_to_export
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n ${{NAMESPACE}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=${{NAMESPACE}}
    image: codefresh/cfstep-helm:3.6.2
    stage: prepare
    title: View helm chart
  build_base_images:
    title: Build base images
    type: parallel
    stage: build
    steps:
      cloudharness-base:
        type: build
        stage: build
        dockerfile: infrastructure/base-images/cloudharness-base/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/cloudharness-base
        title: Cloudharness base
        working_directory: ./cloud-harness
        tag: '${{CLOUDHARNESS_BASE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_BASE_TAG_EXISTS}}', '{{CLOUDHARNESS_BASE_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{CLOUDHARNESS_BASE_TAG_FORCE_BUILD}}', '{{CLOUDHARNESS_BASE_TAG_FORCE_BUILD}}')
                == false
      cloudharness-frontend-build:
        type: build
        stage: build
        dockerfile: infrastructure/base-images/cloudharness-frontend-build/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/cloudharness-frontend-build
        title: Cloudharness frontend build
        working_directory: ./cloud-harness
        tag: '${{CLOUDHARNESS_FRONTEND_BUILD_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_FRONTEND_BUILD_TAG_EXISTS}}',
                '{{CLOUDHARNESS_FRONTEND_BUILD_TAG_EXISTS}}') == true
              forceNoCache: includes('${{CLOUDHARNESS_FRONTEND_BUILD_TAG_FORCE_BUILD}}',
                '{{CLOUDHARNESS_FRONTEND_BUILD_TAG_FORCE_BUILD}}') == false
  build_static_images:
    title: Build static images
    type: parallel
    stage: build
    steps:
      cloudharness-flask:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/cloudharness-flask
        title: Cloudharness flask
        working_directory: ./cloud-harness/infrastructure/common-images/cloudharness-flask
        tag: '${{CLOUDHARNESS_FLASK_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{CLOUDHARNESS_FLASK_TAG_EXISTS}}', '{{CLOUDHARNESS_FLASK_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{CLOUDHARNESS_FLASK_TAG_FORCE_BUILD}}', '{{CLOUDHARNESS_FLASK_TAG_FORCE_BUILD}}')
                == false
  build_application_images:
    type: parallel
    stage: build
    steps:
      nfsserver:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/nfsserver
        title: Nfsserver
        working_directory: ./.overrides/applications/nfsserver
        tag: '${{NFSSERVER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{NFSSERVER_TAG_EXISTS}}', '{{NFSSERVER_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{NFSSERVER_TAG_FORCE_BUILD}}', '{{NFSSERVER_TAG_FORCE_BUILD}}')
                == false
      notifications:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/notifications
        title: Notifications
        working_directory: ./.overrides/applications/notifications/server
        tag: '${{NOTIFICATIONS_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{NOTIFICATIONS_TAG_EXISTS}}', '{{NOTIFICATIONS_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{NOTIFICATIONS_TAG_FORCE_BUILD}}', '{{NOTIFICATIONS_TAG_FORCE_BUILD}}')
                == false
      accounts:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/accounts
        title: Accounts
        working_directory: ./.overrides/applications/accounts
        tag: '${{ACCOUNTS_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{ACCOUNTS_TAG_EXISTS}}', '{{ACCOUNTS_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{ACCOUNTS_TAG_FORCE_BUILD}}', '{{ACCOUNTS_TAG_FORCE_BUILD}}')
                == false
      volumemanager:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/osb/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: osb/volumemanager
        title: Volumemanager
        working_directory: ./cloud-harness/applications/volumemanager/server
        tag: '${{VOLUMEMANAGER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{VOLUMEMANAGER_TAG_EXISTS}}', '{{VOLUMEMANAGER_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{VOLUMEMANAGER_TAG_FORCE_BUILD}}', '{{VOLUMEMANAGER_TAG_FORCE_BUILD}}')
                == false
      jupyterhub:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/jupyterhub
        title: Jupyterhub
        working_directory: ./.overrides/applications/jupyterhub
        tag: '${{JUPYTERHUB_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERHUB_TAG_EXISTS}}', '{{JUPYTERHUB_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{JUPYTERHUB_TAG_FORCE_BUILD}}', '{{JUPYTERHUB_TAG_FORCE_BUILD}}')
                == false
      common:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/osb/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: osb/common
        title: Common
        working_directory: ./.overrides/applications/common/server
        tag: '${{COMMON_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{COMMON_TAG_EXISTS}}', '{{COMMON_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{COMMON_TAG_FORCE_BUILD}}', '{{COMMON_TAG_FORCE_BUILD}}')
                == false
      workflows-send-result-event:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/workflows-send-result-event
        title: Workflows send result event
        working_directory: ./cloud-harness/applications/workflows/tasks/send-result-event
        tag: '${{WORKFLOWS_SEND_RESULT_EVENT_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_SEND_RESULT_EVENT_TAG_EXISTS}}',
                '{{WORKFLOWS_SEND_RESULT_EVENT_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKFLOWS_SEND_RESULT_EVENT_TAG_FORCE_BUILD}}',
                '{{WORKFLOWS_SEND_RESULT_EVENT_TAG_FORCE_BUILD}}') == false
      workflows-extract-download:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/workflows-extract-download
        title: Workflows extract download
        working_directory: ./cloud-harness/applications/workflows/tasks/extract-download
        tag: '${{WORKFLOWS_EXTRACT_DOWNLOAD_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_EXISTS}}',
                '{{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_FORCE_BUILD}}',
                '{{WORKFLOWS_EXTRACT_DOWNLOAD_TAG_FORCE_BUILD}}') == false
      workflows-notify-queue:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/workflows-notify-queue
        title: Workflows notify queue
        working_directory: ./cloud-harness/applications/workflows/tasks/notify-queue
        tag: '${{WORKFLOWS_NOTIFY_QUEUE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_NOTIFY_QUEUE_TAG_EXISTS}}',
                '{{WORKFLOWS_NOTIFY_QUEUE_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKFLOWS_NOTIFY_QUEUE_TAG_FORCE_BUILD}}',
                '{{WORKFLOWS_NOTIFY_QUEUE_TAG_FORCE_BUILD}}') == false
      workflows:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/osb/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: osb/workflows
        title: Workflows
        working_directory: ./cloud-harness/applications/workflows/server
        tag: '${{WORKFLOWS_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKFLOWS_TAG_EXISTS}}', '{{WORKFLOWS_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{WORKFLOWS_TAG_FORCE_BUILD}}', '{{WORKFLOWS_TAG_FORCE_BUILD}}')
                == false
      workspaces-figshare-copy:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/workspaces-figshare-copy
        title: Workspaces figshare copy
        working_directory: ./applications/workspaces/tasks/figshare-copy
        tag: '${{WORKSPACES_FIGSHARE_COPY_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKSPACES_FIGSHARE_COPY_TAG_EXISTS}}',
                '{{WORKSPACES_FIGSHARE_COPY_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKSPACES_FIGSHARE_COPY_TAG_FORCE_BUILD}}',
                '{{WORKSPACES_FIGSHARE_COPY_TAG_FORCE_BUILD}}') == false
      workspaces-scan-workspace:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/workspaces-scan-workspace
        title: Workspaces scan workspace
        working_directory: ./applications/workspaces/tasks/scan-workspace
        tag: '${{WORKSPACES_SCAN_WORKSPACE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKSPACES_SCAN_WORKSPACE_TAG_EXISTS}}',
                '{{WORKSPACES_SCAN_WORKSPACE_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKSPACES_SCAN_WORKSPACE_TAG_FORCE_BUILD}}',
                '{{WORKSPACES_SCAN_WORKSPACE_TAG_FORCE_BUILD}}') == false
      workspaces-github-copy:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/workspaces-github-copy
        title: Workspaces github copy
        working_directory: ./applications/workspaces/tasks/github-copy
        tag: '${{WORKSPACES_GITHUB_COPY_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKSPACES_GITHUB_COPY_TAG_EXISTS}}',
                '{{WORKSPACES_GITHUB_COPY_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKSPACES_GITHUB_COPY_TAG_FORCE_BUILD}}',
                '{{WORKSPACES_GITHUB_COPY_TAG_FORCE_BUILD}}') == false
      workspaces-dandi-copy:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/workspaces-dandi-copy
        title: Workspaces dandi copy
        working_directory: ./applications/workspaces/tasks/dandi-copy
        tag: '${{WORKSPACES_DANDI_COPY_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKSPACES_DANDI_COPY_TAG_EXISTS}}',
                '{{WORKSPACES_DANDI_COPY_TAG_EXISTS}}') == true
              forceNoCache: includes('${{WORKSPACES_DANDI_COPY_TAG_FORCE_BUILD}}',
                '{{WORKSPACES_DANDI_COPY_TAG_FORCE_BUILD}}') == false
      workspaces:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/osb/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: osb/workspaces
        title: Workspaces
        working_directory: ./applications/workspaces/server
        tag: '${{WORKSPACES_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{WORKSPACES_TAG_EXISTS}}', '{{WORKSPACES_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{WORKSPACES_TAG_FORCE_BUILD}}', '{{WORKSPACES_TAG_FORCE_BUILD}}')
                == false
      netpyne:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/netpyne
        title: Netpyne
        working_directory: ./applications/netpyne
        tag: '${{NETPYNE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{NETPYNE_TAG_EXISTS}}', '{{NETPYNE_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{NETPYNE_TAG_FORCE_BUILD}}', '{{NETPYNE_TAG_FORCE_BUILD}}')
                == false
      accounts-api:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_FLASK=${{REGISTRY}}/osb/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}
        image_name: osb/accounts-api
        title: Accounts api
        working_directory: ./applications/accounts-api
        tag: '${{ACCOUNTS_API_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{ACCOUNTS_API_TAG_EXISTS}}', '{{ACCOUNTS_API_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{ACCOUNTS_API_TAG_FORCE_BUILD}}', '{{ACCOUNTS_API_TAG_FORCE_BUILD}}')
                == false
      osb-portal:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/osb-portal
        title: Osb portal
        working_directory: ./applications/osb-portal
        tag: '${{OSB_PORTAL_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{OSB_PORTAL_TAG_EXISTS}}', '{{OSB_PORTAL_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{OSB_PORTAL_TAG_FORCE_BUILD}}', '{{OSB_PORTAL_TAG_FORCE_BUILD}}')
                == false
      backoffice:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/backoffice
        title: Backoffice
        working_directory: ./applications/backoffice
        tag: '${{BACKOFFICE_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{BACKOFFICE_TAG_EXISTS}}', '{{BACKOFFICE_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{BACKOFFICE_TAG_FORCE_BUILD}}', '{{BACKOFFICE_TAG_FORCE_BUILD}}')
                == false
      nwb-explorer:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/nwb-explorer
        title: Nwb explorer
        working_directory: ./applications/nwb-explorer
        tag: '${{NWB_EXPLORER_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{NWB_EXPLORER_TAG_EXISTS}}', '{{NWB_EXPLORER_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{NWB_EXPLORER_TAG_FORCE_BUILD}}', '{{NWB_EXPLORER_TAG_FORCE_BUILD}}')
                == false
      jupyterlab:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/jupyterlab
        title: Jupyterlab
        working_directory: ./applications/jupyterlab
        tag: '${{JUPYTERLAB_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{JUPYTERLAB_TAG_EXISTS}}', '{{JUPYTERLAB_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{JUPYTERLAB_TAG_FORCE_BUILD}}', '{{JUPYTERLAB_TAG_FORCE_BUILD}}')
                == false
  tests_unit:
    stage: unittest
    type: parallel
    steps:
      workspaces_ut:
        title: Unit tests for workspaces
        commands:
        - pytest /usr/src/app/
        image: '${{REGISTRY}}/osb/workspaces:${{WORKSPACES_TAG}}'
  deployment:
    stage: deploy
    type: helm
    working_directory: ./${{CF_REPO_NAME}}
    title: Installing chart
    arguments:
      helm_version: 3.6.2
      chart_name: deployment/helm
      release_name: '${{NAMESPACE}}'
      kube_context: '${{CLUSTER_NAME}}'
      namespace: '${{NAMESPACE}}'
      chart_version: '${{CF_BUILD_ID}}'
      cmd_ps: --wait --timeout 600s --create-namespace
      custom_value_files:
      - ./deployment/helm/values.yaml
      custom_values:
      - apps_notifications_harness_secrets_email-user=${{EMAIL-USER}}
      - apps_notifications_harness_secrets_email-password=${{EMAIL-PASSWORD}}
      - apps_workspaces_harness_secrets_github-user=${{GITHUB-USER}}
      - apps_workspaces_harness_secrets_github-token=${{GITHUB-TOKEN}}
    image: codefresh/cfstep-helm:3.6.2
    environment:
    - CHART_REF=./deployment/helm
    - RELEASE_NAME=${{NAMESPACE}}
    - KUBE_CONTEXT=${{CLUSTER_NAME}}
    - NAMESPACE=${{NAMESPACE}}
    - CHART_VERSION=${{DEPLOYMENT_PUBLISH_TAG}}
    - HELM_REPO_USE_HTTP=false
    - HELM_REPO_CONTEXT_PATH=
    - TIMEOUT=600s
    - VALUESFILE_values=./deployment/helm/values.yaml
  build_test_images:
    title: Build test images
    type: parallel
    stage: qa
    steps:
      test-e2e:
        type: build
        stage: build
        dockerfile: Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        image_name: osb/test-e2e
        title: Test e2e
        working_directory: ./cloud-harness/test/test-e2e
        tag: '${{TEST_E2E_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{TEST_E2E_TAG_EXISTS}}', '{{TEST_E2E_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{TEST_E2E_TAG_FORCE_BUILD}}', '{{TEST_E2E_TAG_FORCE_BUILD}}')
                == false
      test-api:
        type: build
        stage: build
        dockerfile: test/test-api/Dockerfile
        registry: '${{CODEFRESH_REGISTRY}}'
        buildkit: true
        build_arguments:
        - DOMAIN=${{DOMAIN}}
        - NOCACHE=${{CF_BUILD_ID}}
        - REGISTRY=${{REGISTRY}}/osb/
        - CLOUDHARNESS_BASE=${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}
        image_name: osb/test-api
        title: Test api
        working_directory: ./cloud-harness
        tag: '${{TEST_API_TAG}}'
        when:
          condition:
            any:
              buildDoesNotExist: includes('${{TEST_API_TAG_EXISTS}}', '{{TEST_API_TAG_EXISTS}}')
                == true
              forceNoCache: includes('${{TEST_API_TAG_FORCE_BUILD}}', '{{TEST_API_TAG_FORCE_BUILD}}')
                == false
    when:
      condition:
        all:
          whenVarExists: includes("${{SKIP_TESTS}}", "{{SKIP_TESTS}}") == true
  wait_deployment:
    stage: qa
    title: Wait deployment to be ready
    image: codefresh/kubectl
    commands:
    - kubectl config use-context ${{CLUSTER_NAME}}
    - kubectl config set-context --current --namespace=${{NAMESPACE}}
    - kubectl rollout status deployment/notifications
    - kubectl rollout status deployment/accounts
    - kubectl rollout status deployment/volumemanager
    - kubectl rollout status deployment/argo-server-gk
    - kubectl rollout status deployment/common
    - kubectl rollout status deployment/events-ui-gk
    - kubectl rollout status deployment/workflows
    - kubectl rollout status deployment/workspaces
    - kubectl rollout status deployment/accounts-api
    - kubectl rollout status deployment/osb-portal
    - kubectl rollout status deployment/backoffice
    - kubectl rollout status deployment/backoffice-gk
    - sleep 60
    when:
      condition:
        all:
          whenVarExists: includes("${{SKIP_TESTS}}", "{{SKIP_TESTS}}") == true
  tests_api:
    stage: qa
    title: Api tests
    working_directory: /home/test
    image: '${{REGISTRY}}/osb/test-api:${{TEST_API_TAG}}'
    fail_fast: false
    commands:
    - echo $APP_NAME
    scale:
      volumemanager_api_test:
        title: volumemanager api test
        volumes:
        - '${{CF_REPO_NAME}}/cloud-harness/applications/volumemanager:/home/test'
        - '${{CF_REPO_NAME}}/deployment/helm/values.yaml:/opt/cloudharness/resources/allvalues.yaml'
        environment:
        - APP_URL=https://volumemanager.${{DOMAIN}}/api
        commands:
        - st --pre-run cloudharness_test.apitest_init run api/openapi.yaml --base-url
          https://volumemanager.${{DOMAIN}}/api -c all
      common_api_test:
        title: common api test
        volumes:
        - '${{CF_REPO_NAME}}/.overrides/applications/common:/home/test'
        - '${{CF_REPO_NAME}}/deployment/helm/values.yaml:/opt/cloudharness/resources/allvalues.yaml'
        environment:
        - APP_URL=https://common.${{DOMAIN}}/api
        commands:
        - st --pre-run cloudharness_test.apitest_init run api/openapi.yaml --base-url
          https://common.${{DOMAIN}}/api -c all
      workflows_api_test:
        title: workflows api test
        volumes:
        - '${{CF_REPO_NAME}}/cloud-harness/applications/workflows:/home/test'
        - '${{CF_REPO_NAME}}/deployment/helm/values.yaml:/opt/cloudharness/resources/allvalues.yaml'
        environment:
        - APP_URL=https://workflows.${{DOMAIN}}/api
        commands:
        - st --pre-run cloudharness_test.apitest_init run api/openapi.yaml --base-url
          https://workflows.${{DOMAIN}}/api -c all
    when:
      condition:
        all:
          whenVarExists: includes("${{SKIP_TESTS}}", "{{SKIP_TESTS}}") == true
  tests_e2e:
    stage: qa
    title: End to end tests
    working_directory: /home/test
    image: '${{REGISTRY}}/osb/test-e2e:${{TEST_E2E_TAG}}'
    fail_fast: false
    commands:
    - yarn test
    scale:
      osb-portal_e2e_test:
        title: osb-portal e2e test
        volumes:
        - '${{CF_REPO_NAME}}/applications/osb-portal/test/e2e:/home/test/__tests__/osb-portal'
        environment:
        - APP_URL=https://www.${{DOMAIN}}
    when:
      condition:
        all:
          whenVarExists: includes("${{SKIP_TESTS}}", "{{SKIP_TESTS}}") == true
  approval:
    type: pending-approval
    stage: publish
    title: Approve build
    description: Approve build release and tagging
    timeout:
      duration: 168
      finalState: denied
  publish:
    type: parallel
    stage: publish
    steps:
      publish_cloudharness-base:
        stage: publish
        type: push
        title: Cloudharness base
        candidate: '${{REGISTRY}}/osb/cloudharness-base:${{CLOUDHARNESS_BASE_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-frontend-build:
        stage: publish
        type: push
        title: Cloudharness frontend build
        candidate: '${{REGISTRY}}/osb/cloudharness-frontend-build:${{CLOUDHARNESS_FRONTEND_BUILD_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-flask:
        stage: publish
        type: push
        title: Cloudharness flask
        candidate: '${{REGISTRY}}/osb/cloudharness-flask:${{CLOUDHARNESS_FLASK_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_nfsserver:
        stage: publish
        type: push
        title: Nfsserver
        candidate: '${{REGISTRY}}/osb/nfsserver:${{NFSSERVER_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_notifications:
        stage: publish
        type: push
        title: Notifications
        candidate: '${{REGISTRY}}/osb/notifications:${{NOTIFICATIONS_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_accounts:
        stage: publish
        type: push
        title: Accounts
        candidate: '${{REGISTRY}}/osb/accounts:${{ACCOUNTS_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_volumemanager:
        stage: publish
        type: push
        title: Volumemanager
        candidate: '${{REGISTRY}}/osb/volumemanager:${{VOLUMEMANAGER_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_jupyterhub:
        stage: publish
        type: push
        title: Jupyterhub
        candidate: '${{REGISTRY}}/osb/jupyterhub:${{JUPYTERHUB_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_common:
        stage: publish
        type: push
        title: Common
        candidate: '${{REGISTRY}}/osb/common:${{COMMON_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-send-result-event:
        stage: publish
        type: push
        title: Workflows send result event
        candidate: '${{REGISTRY}}/osb/workflows-send-result-event:${{WORKFLOWS_SEND_RESULT_EVENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-extract-download:
        stage: publish
        type: push
        title: Workflows extract download
        candidate: '${{REGISTRY}}/osb/workflows-extract-download:${{WORKFLOWS_EXTRACT_DOWNLOAD_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-notify-queue:
        stage: publish
        type: push
        title: Workflows notify queue
        candidate: '${{REGISTRY}}/osb/workflows-notify-queue:${{WORKFLOWS_NOTIFY_QUEUE_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows:
        stage: publish
        type: push
        title: Workflows
        candidate: '${{REGISTRY}}/osb/workflows:${{WORKFLOWS_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-figshare-copy:
        stage: publish
        type: push
        title: Workspaces figshare copy
        candidate: '${{REGISTRY}}/osb/workspaces-figshare-copy:${{WORKSPACES_FIGSHARE_COPY_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-scan-workspace:
        stage: publish
        type: push
        title: Workspaces scan workspace
        candidate: '${{REGISTRY}}/osb/workspaces-scan-workspace:${{WORKSPACES_SCAN_WORKSPACE_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-github-copy:
        stage: publish
        type: push
        title: Workspaces github copy
        candidate: '${{REGISTRY}}/osb/workspaces-github-copy:${{WORKSPACES_GITHUB_COPY_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces-dandi-copy:
        stage: publish
        type: push
        title: Workspaces dandi copy
        candidate: '${{REGISTRY}}/osb/workspaces-dandi-copy:${{WORKSPACES_DANDI_COPY_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces:
        stage: publish
        type: push
        title: Workspaces
        candidate: '${{REGISTRY}}/osb/workspaces:${{WORKSPACES_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_netpyne:
        stage: publish
        type: push
        title: Netpyne
        candidate: '${{REGISTRY}}/osb/netpyne:${{NETPYNE_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_accounts-api:
        stage: publish
        type: push
        title: Accounts api
        candidate: '${{REGISTRY}}/osb/accounts-api:${{ACCOUNTS_API_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_osb-portal:
        stage: publish
        type: push
        title: Osb portal
        candidate: '${{REGISTRY}}/osb/osb-portal:${{OSB_PORTAL_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_backoffice:
        stage: publish
        type: push
        title: Backoffice
        candidate: '${{REGISTRY}}/osb/backoffice:${{BACKOFFICE_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_nwb-explorer:
        stage: publish
        type: push
        title: Nwb explorer
        candidate: '${{REGISTRY}}/osb/nwb-explorer:${{NWB_EXPLORER_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_jupyterlab:
        stage: publish
        type: push
        title: Jupyterlab
        candidate: '${{REGISTRY}}/osb/jupyterlab:${{JUPYTERLAB_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        registry: '${{REGISTRY_PUBLISH_URL}}'
    when:
      condition:
        all:
          whenVarExists: includes("${{DEPLOYMENT_PUBLISH_TAG}}", "{{DEPLOYMENT_PUBLISH_TAG}}")
            == false
