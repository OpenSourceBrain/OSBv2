version: '1.0'
stages:
- prepare
- deploy
- publish
steps:
  main_clone:
    title: Clone main repository
    type: git-clone
    stage: prepare
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_BRANCH}}'
    git: github
  post_main_clone:
    title: Post main clone
    type: parallel
    stage: prepare
    steps:
    - title: Cloning cloud-harness repository...
      type: git-clone
      stage: prepare
      repo: https://github.com/MetaCell/cloud-harness.git
      revision: '${{CLOUDHARNESS_BRANCH}}'
      working_directory: .
      git: github
  prepare_deployment:
    title: Prepare helm chart
    image: python:3.7
    stage: prepare
    working_directory: .
    commands:
    - pip install cloud-harness/utilities
    - harness-deployment . cloud-harness -m build -t ${{DEPLOYMENT_TAG}} -d ${{DOMAIN}}
      -r ${{REGISTRY}} -rs ${{REGISTRY_SECRET}} -e prod
  prepare_deployment_view:
    commands:
    - helm template ./deployment/helm --debug -n ${{NAME}}
    environment:
    - ACTION=auth
    - KUBE_CONTEXT=${{NAME}}
    image: codefresh/cfstep-helm:3.4.1
    stage: prepare
    title: View helm chart
  deployment:
    stage: deploy
    image: codefresh/cfstep-helm:3.4.1
    title: Installing chart
    environment:
    - CHART_REF=./deployment/helm
    - RELEASE_NAME=${{NAMESPACE}}
    - KUBE_CONTEXT=${{CLUSTER_NAME}}
    - NAMESPACE=${{NAMESPACE}}
    - CHART_VERSION=${{DEPLOYMENT_PUBLISH_TAG}}
    - HELM_REPO_USE_HTTP=false
    - HELM_REPO_CONTEXT_PATH=
    - TIMEOUT=600s
    - VALUESFILE_values=./deployment/helm/values.yaml
  approval:
    type: pending-approval
    stage: publish
    title: Approve
    description: Approve publication
    timeout:
      duration: 168
      finalState: approved
  publish:
    type: parallel
    stage: publish
    steps:
      publish_cloudharness-base:
        stage: publish
        type: push
        title: Cloudharness base
        candidate: '${{REGISTRY}}/cloudharness-base:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-base-debian:
        stage: publish
        type: push
        title: Cloudharness base debian
        candidate: '${{REGISTRY}}/cloudharness-base-debian:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-frontend-build:
        stage: publish
        type: push
        title: Cloudharness frontend build
        candidate: '${{REGISTRY}}/cloudharness-frontend-build:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_cloudharness-flask:
        stage: publish
        type: push
        title: Cloudharness flask
        candidate: '${{REGISTRY}}/cloudharness-flask:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_volumemanager:
        stage: publish
        type: push
        title: Volumemanager
        candidate: '${{REGISTRY}}/volumemanager:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_accounts:
        stage: publish
        type: push
        title: Accounts
        candidate: '${{REGISTRY}}/accounts:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_osb-portal:
        stage: publish
        type: push
        title: Osb portal
        candidate: '${{REGISTRY}}/osb-portal:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_common:
        stage: publish
        type: push
        title: Common
        candidate: '${{REGISTRY}}/common:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workspaces:
        stage: publish
        type: push
        title: Workspaces
        candidate: '${{REGISTRY}}/workspaces:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-print-file:
        stage: publish
        type: push
        title: Workflows print file
        candidate: '${{REGISTRY}}/workflows-print-file:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-extract-download:
        stage: publish
        type: push
        title: Workflows extract download
        candidate: '${{REGISTRY}}/workflows-extract-download:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-send-result-event:
        stage: publish
        type: push
        title: Workflows send result event
        candidate: '${{REGISTRY}}/workflows-send-result-event:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-notify-queue:
        stage: publish
        type: push
        title: Workflows notify queue
        candidate: '${{REGISTRY}}/workflows-notify-queue:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows-extract-s3:
        stage: publish
        type: push
        title: Workflows extract s3
        candidate: '${{REGISTRY}}/workflows-extract-s3:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
      publish_workflows:
        stage: publish
        type: push
        title: Workflows
        candidate: '${{REGISTRY}}/workflows:${{DEPLOYMENT_TAG}}'
        tags:
        - '${{DEPLOYMENT_PUBLISH_TAG}}'
        - latest
        registry: '${{REGISTRY_PUBLISH_URL}}'
  git-tag:
    title: Performing git tagging
    stage: publish
    image: alpine/git:latest
    commands:
    - git tag ${{DEPLOYMENT_PUBLISH_TAG}}
    - ORIGIN=$(git remote get-url origin)
    - PROTOCOL=https://
    - REPLACEMENT=${PROTOCOL}${{REPO_TOKEN}}@
    - git remote set-url origin ${ORIGIN/$PROTOCOL/$REPLACEMENT}
    - git push origin --tags
